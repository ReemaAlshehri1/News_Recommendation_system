# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ShxtaleZt_W87dyGP7r1n9Z3qopqf375
"""

from flask import Flask, request, render_template_string, redirect, url_for
from pyngrok import ngrok
from recommender import (
    recommend_content_based,
    recommend_keyword_based,
    load_user_data,
    save_user_data,
    clean_user_input
)

# HTML Templates
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Smart News Recommender</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    body { font-family: 'Inter', sans-serif; }
  </style>
</head>
<body class="bg-gradient-to-tr from-blue-100 to-blue-50 min-h-screen p-6">
  <div class="max-w-3xl mx-auto bg-white shadow-2xl rounded-xl p-8 mt-10">
    <h1 class="text-4xl font-bold text-center text-blue-800 mb-2">Smart News Recommender</h1>
    <p class="text-center text-gray-600 mb-6">Discover news tailored to your interests using AI</p>

    <form method="POST" class="space-y-4">
      <textarea name="user_input" placeholder="Type a topic, e.g. AI in healthcare..." required
        class="w-full p-4 rounded-md border border-gray-300 focus:ring-2 focus:ring-blue-400 focus:outline-none"></textarea>
      <select name="model" required class="w-full border border-gray-300 rounded p-2">
        <option value="content_based">Content-Based Filtering</option>
        <option value="keyword">Keyword-Based Matching</option>
      </select>
      <button type="submit"
        class="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-md font-semibold transition">
        Get Recommendations
      </button>
    </form>

    {% if query %}
    <div class="mt-10">
      <h2 class="text-2xl font-semibold text-blue-700 mb-6">Results for: "{{ query }}"</h2>
      <div class="space-y-6">
        {% for item in results %}
        <div class="article bg-gray-50 border border-gray-200 p-4 rounded-lg shadow-sm">
          <h3 class="text-xl font-bold text-blue-700 mb-2">{{ item.subcategory }}</h3>
          <div class="text-gray-800 max-h-48 overflow-y-auto p-3 rounded bg-gray-100 text-justify">
            {{ item.content }}
          </div>
          <div class="mt-4 flex gap-2">
            <button class="like-btn bg-green-100 hover:bg-green-200 px-3 py-1 rounded text-sm">Like</button>
            <button class="dislike-btn bg-red-100 hover:bg-red-200 px-3 py-1 rounded text-sm">Dislike</button>
            <button class="bookmark-btn bg-yellow-100 hover:bg-yellow-200 px-3 py-1 rounded text-sm">Bookmark</button>
          </div>
        </div>
        {% endfor %}
      </div>

      <div class="mt-8 text-center">
        <form action="/refresh" method="POST">
          <button type="submit" class="bg-purple-600 hover:bg-purple-700 text-white py-3 px-6 rounded-lg font-bold">Refresh Recommendations üîÑ</button>
        </form>
      </div>
    </div>
    {% endif %}

    <div class="mt-8 text-center">
      <a href="/bookmarks" class="text-blue-600 underline hover:text-blue-800">View Bookmarked Articles</a> |
      <a href="/performance" class="text-green-600 underline hover:text-green-800">View System Performance</a>
    </div>
  </div>

  <footer class="text-center text-sm text-gray-400 mt-10">
    Built with Flask & Sentence Transformers
  </footer>

<script>
document.addEventListener("DOMContentLoaded", function () {
  function sendAction(action, content, btn) {
    fetch("/interact", {
      method: "POST",
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: `action=${action}&content=${encodeURIComponent(content)}`
    });

    btn.classList.add("transform", "scale-95");
    setTimeout(() => {
      btn.classList.remove("scale-95");
    }, 150);
  }

  document.querySelectorAll(".like-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      const content = btn.closest('.article').querySelector(".text-gray-800").innerText;
      sendAction("likes", content, btn);
    });
  });

  document.querySelectorAll(".dislike-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      const content = btn.closest('.article').querySelector(".text-gray-800").innerText;
      sendAction("dislikes", content, btn);
    });
  });

  document.querySelectorAll(".bookmark-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      const content = btn.closest('.article').querySelector(".text-gray-800").innerText;
      sendAction("bookmarks", content, btn);
    });
  });
});
</script>
</body>
</html>

'''
BOOKMARKS_TEMPLATE = '''
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Bookmarks</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-blue-50 p-6">
  <div class="max-w-3xl mx-auto bg-white p-8 shadow rounded">
    <h1 class="text-2xl font-bold mb-6 text-center text-blue-700">Your Bookmarked Articles</h1>
    {% if results %}
      {% for item in results %}
        <div class="p-4 border-b">{{ item }}</div>
      {% endfor %}
    {% else %}
      <p class="text-center text-gray-500">No bookmarks yet.</p>
    {% endif %}
    <div class="mt-6 text-center">
      <a href="/" class="text-blue-600 underline">Back to Home</a>
    </div>
  </div>
</body>
</html>
'''
app = Flask(__name__)

#  Global variables to persist session
last_query = ""
last_model_type = ""

# Routes

@app.route('/', methods=['GET', 'POST'])
def home():
    global last_query, last_model_type
    results = []
    query = ""

    if request.method == 'POST':
        raw_query = request.form['user_input']
        query = clean_user_input(raw_query)
        model_type = request.form['model']
        last_query = query
        last_model_type = model_type
    else:
        query = last_query
        model_type = last_model_type

    if query:
        if model_type == 'content_based':
            results = recommend_content_based(query)
        elif model_type == 'keyword':
            results = recommend_keyword_based(query)

    return render_template_string(HTML_TEMPLATE, results=results, query=query)

@app.route('/refresh', methods=['POST'])
def refresh():
    return redirect(url_for('home'))

@app.route('/interact', methods=['POST'])
def interact():
    action = request.form.get('action')
    content = request.form.get('content')
    data = load_user_data()

    if action == 'likes':
        if content not in data['likes']:
            data['likes'].append(content)
        if content in data['dislikes']:
            data['dislikes'].remove(content)
        data['performance']['likes_count'] += 1

    elif action == 'dislikes':
        if content not in data['dislikes']:
            data['dislikes'].append(content)
        if content in data['likes']:
            data['likes'].remove(content)
        data['performance']['dislikes_count'] += 1

    elif action == 'bookmarks':
        if content not in data['bookmarks']:
            data['bookmarks'].append(content)

    save_user_data(data)
    return "Success"

@app.route('/bookmarks')
def bookmarks():
    data = load_user_data()
    return render_template_string(BOOKMARKS_TEMPLATE, results=data['bookmarks'])

@app.route('/performance')
def performance():
    data = load_user_data()
    likes = len(data['likes'])
    dislikes = len(data['dislikes'])
    total = likes + dislikes

    if total == 0:
        score = "No feedback yet."
    else:
        accuracy = (likes / total) * 100
        score = f"{accuracy:.2f}% satisfaction rate"

    html = f'''
    <h2>Likes: {likes} | Dislikes: {dislikes}</h2>
    <h3>Performance: {score}</h3><br>
    <a href='/'>Back to Home</a>
    '''
    return html

# === Run Flask + Ngrok ===
if __name__ == '__main__':
    public_url = ngrok.connect(5000)
    print("üåê Public URL:", public_url)
    app.run(port=5000)