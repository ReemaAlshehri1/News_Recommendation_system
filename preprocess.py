# -*- coding: utf-8 -*-
"""preprocess.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oLOJOHU-3sPvxI-8Gha2dUPvKUnJevHT
"""

import pandas as pd
import zipfile
import pickle
from sentence_transformers import SentenceTransformer
from keybert import KeyBERT

def unzip_archive(zip_path='/content/archieve8.zip', extract_to='data'):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to)
    print(f"✅ Extracted to {extract_to}")

def preprocess_news(input_path='/content/news.tsv', output_path='data/news_preprocessed.csv'):
    df = pd.read_table(input_path, header=None)
    df.columns = ['news_id', 'category', 'subcategory', 'title', 'abstract', 'url', 'title_entities', 'abstract_entities']
    df['content'] = df['title'].fillna('') + '. ' + df['abstract'].fillna('')
    df[['news_id', 'category', 'subcategory', 'content']].to_csv(output_path, index=False)
    print(f"✅ Saved preprocessed data to {output_path}")

def train_and_save_embeddings(news_path='data/news_preprocessed.csv', output_path='data/news_embeddings.pkl'):
    df = pd.read_csv(news_path)
    model = SentenceTransformer('all-MiniLM-L6-v2')
    embeddings = model.encode(df['content'].tolist(), show_progress_bar=True)
    with open(output_path, 'wb') as f:
        pickle.dump(embeddings, f)
    print(f"✅ Saved embeddings to {output_path}")

def extract_and_save_keywords(news_path='data/news_preprocessed.csv', output_path='data/news_keywords.pkl', top_n=5):
    df = pd.read_csv(news_path)
    model = KeyBERT('all-MiniLM-L6-v2')
    all_keywords = []
    for content in df['content']:
        keywords = model.extract_keywords(content, keyphrase_ngram_range=(1, 2), stop_words='english', top_n=top_n)
        all_keywords.append([kw for kw, _ in keywords])
    with open(output_path, 'wb') as f:
        pickle.dump(all_keywords, f)
    print(f"✅ Saved keywords to {output_path}")

if __name__ == "__main__":
    unzip_archive()
    preprocess_news()
    train_and_save_embeddings()
    extract_and_save_keywords()